definitions:
  dto.RegisterUser:
    properties:
      email:
        maxLength: 50
        minLength: 0
        type: string
      name:
        maxLength: 10
        minLength: 3
        type: string
      password:
        maxLength: 15
        minLength: 8
        type: string
    required:
    - email
    - name
    - password
    type: object
  exception.ApplicationException:
    properties:
      code:
        type: string
      message:
        type: string
    type: object
  user.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
info:
  contact: {}
paths:
  /v1/users:
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created
        "400":
          description: "{ \"code\": \"INVALID_ENTITY\", \"message\": \"Invalid\tentity\"
            },{ \"code\": \"USER_ALREADY_EXISTS\", \"message\": \"Already\texists\tuser\"
            }"
          schema:
            $ref: '#/definitions/exception.ApplicationException'
      summary: Register User
      tags:
      - user
  /v1/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: "{ \"code\": \"USER_NOT_FOUND\", \"message\": \"User\tnot\tfound\"
            }"
          schema:
            $ref: '#/definitions/exception.ApplicationException'
      summary: Delete User
      tags:
      - user
    get:
      consumes:
      - application/json
      description: Get information about a specific user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.User'
        "400":
          description: "{ \"code\": \"USER_NOT_FOUND\", \"message\": \"User\tnot\tfound\"
            }"
          schema:
            $ref: '#/definitions/exception.ApplicationException'
      summary: Get User
      tags:
      - user
swagger: "2.0"
